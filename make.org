
#+PROPERTY: header-args :results silent

ctrl-c ctrl-c in this block...
#+BEGIN_SRC emacs-lisp :noweb yes
<<hack-babel-exec>>
#+END_SRC

* license

Copyright Â© 2015, Jeremy Heiner (github.com/JHeiner).
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

  3. Neither the name of the copyright holder nor the names of any
     contributors may be used to endorse or promote products derived from
     this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.


* hack babel execution of src blocks in this document
:PROPERTIES:
:noweb-ref: hack-babel-exec
:END:

normally babel has to wait for results, locking up emacs during a long
operation. so fake "languages" are invented which return a useless
result to babel so emacs can continue while a term-mode buffer
asynchronously runs the SRC block. the file level :results silent
suppresses the insertion of those useless results into this file.

#+BEGIN_SRC emacs-lisp
(require 'term)
(setq-local org-confirm-babel-evaluate nil)
#+END_SRC

** subvert save/restore of window config

need to show the term-mode buffer to provide feedback that something
happened. the idle timer trick isn't actually needed for SRC blocks:
babel doesn't wrap calls to org-babel-execute:* in excursion
protection. but when babel execs a "+CALL:" it does use protection.

#+BEGIN_SRC emacs-lisp
(defun idle-display-buffer (action &optional buffer-or-name test frame)
"Subvert `save-window-excursion' by scheduling an idle timer to:
  (if (not (`get-buffer-window' BUFFER-OR-NAME TEST))
    (`display-buffer' BUFFER-OR-NAME ACTION FRAME))
Return the timer object created by `run-with-idle-timer'.
BUFFER-OR-NAME defaults to the `current-buffer'."
  (lexical-let ((b (or buffer-or-name (current-buffer)))
                (t test)(a action)(f frame))
    (run-with-idle-timer 0 nil (lambda ()
        (if (not (get-buffer-window b t))
          (display-buffer b a f) ) )) ) )

(defvar display-buffer--some-below-action
  '((display-buffer-use-some-window
     display-buffer-below-selected)
    (inhibit-same-window . t) )
"A `display-buffer' action for displaying in some other window.")
#+END_SRC

** put a few bells'n'whistles on make-term

#+BEGIN_SRC emacs-lisp
(defun make-term-fancy (bufname tmpdir program &rest switches)
"Enhanced `make-term' with timestamps, removal of TMPDIR after
process exit, and `idle-display-buffer'. There is no startfile,
and no asterisks are concat'ed to the given BUFNAME."
  (with-current-buffer (get-buffer-create bufname)
    (idle-display-buffer display-buffer--some-below-action)
    (let ((now (current-time))
          (busy (term-check-proc (current-buffer))))
      (if busy
          (progn (ding)
            (message "%s has a process (%s)" (current-buffer) (car busy)) )
        (goto-char (point-max))
        (insert (format-time-string "%Y-%m-%d %T" now) " " program)
        (mapc (lambda (x) (insert " " x)) switches)
        (insert "\n")
        ;(if tmpdir (insert "tmpdir: " tmpdir "\n" ))
        (insert "\n")
        (term-mode)
        (term-exec (current-buffer) bufname program nil switches)
        (term-char-mode)
        (setq-local make-term-fancy-started now)
        (if tmpdir (setq-local make-term-fancy-tmpdir tmpdir)) )
        (setq term-scroll-to-bottom-on-output 'others) )
    (current-buffer) ) )

(defun make-term-fancy-exit (ignored1 ignored2)
"Do not call directly, but as advice for `term-handle-exit'.
Implements some of the `make-term-fancy' enhancements."
  (goto-char (point-max))
  (when (local-variable-p 'make-term-fancy-tmpdir)
    (when make-term-fancy-tmpdir
      (insert "removing " make-term-fancy-tmpdir "/...")
      (delete-directory make-term-fancy-tmpdir t)
      (insert "\n"))
    (kill-local-variable 'make-term-fancy-tmpdir) )
  (when (local-variable-p 'make-term-fancy-started)
    (let ((now (current-time)))
      (insert (format-time-string "%Y-%m-%d %T" now) " = "
        (if (not make-term-fancy-started) "(start time unknown)"
          (format-seconds "%Y, %D, %H, %M, %z%S"
            (float-time (time-subtract now make-term-fancy-started)) ) )
        "\n" ) )
    (kill-local-variable 'make-term-fancy-started) )
  (mapc (lambda (w) (set-window-point w (point-max)))
    (get-buffer-window-list) ) )

(advice-add 'term-handle-exit :after 'make-term-fancy-exit)
#+END_SRC

** variable assignments

originally used (org-babel-variable-assignments:sh ps),
but got sick of looking at all the $(cat<<) stuff logged by -x.

#+BEGIN_SRC emacs-lisp
(defun org-babel-variable-assignments:sh-apos (params)
  (mapcar (lambda (p)
      (format "%s='%s'" (cadr p) (org-babel-sh-var-to-string (cddr p))) )
    (org-babel-get-header params :var) ) )
#+END_SRC

** emacs-term dumps block to file in tmpdir and feeds it to bash

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-src-lang-modes '("emacs-term" . sh))
(defun org-babel-execute:emacs-term (body params)
  (let* ((ps (org-babel-process-params params))
         (eb (org-babel-expand-body:generic body ps
               (org-babel-variable-assignments:sh-apos ps)))
         (bn (format "*obexec-%s*" (cdr (assoc :session ps))))
         (td (make-temp-file "emacs-" t))
         (sf (expand-file-name "make-term-fancy-bash" td)) )
    (with-temp-file sf (insert eb "\n"))
    (make-term-fancy bn td "bash" "-xe" sf)
    (list bn) ) )
#+END_SRC

** emacs-nspawn execs block inside a pacstrap chroot

unionfs COW redirects any attempted modifications of the pacstrap
chroot off into a "write" directory under tmpdir. the SRC block is
dumped under this "write" directory so it appears inside the unionfs
at "/tmp/nspawn".

the 1st systemd-nspawn copies user ids into the unionfs so the 2nd one
can be run with those ids.

the 2nd systemd-nspawn binds the current directory into the unionfs,
so modifications done inside the container under that mount affect the
current directory (not the unionfs COW).

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-src-lang-modes '("emacs-nspawn" . sh))
(defun org-babel-execute:emacs-nspawn (body params)
  (let* ((ps (org-babel-process-params params))
         (eb (org-babel-expand-body:generic body ps
               (org-babel-variable-assignments:sh-apos ps)))
         (bn (format "*obexec-%s*" (cdr (assoc :session ps))))
         (pd (cdr (assoc :pacstrap ps)))
         (rd (expand-file-name (concat "pacstrap/" pd)))
         (td (make-temp-file "emacs-" t))
         (ud (expand-file-name "union" td))
         (wd (expand-file-name "write" td))
         (sd (expand-file-name "tmp" wd))
         (sf (expand-file-name "make-term-fancy-bash" td)) )
    (make-directory ud t)(make-directory sd t)
    (with-temp-file (expand-file-name "nspawn" sd)
      (insert
        "cd " default-directory "\n"
        eb "\n") )
    (with-temp-file sf
      (insert
        "trap 'sudo fusermount -u " ud ";sudo rm -rf " wd "' EXIT" "\n"
        "sudo unionfs -o cow -o allow_other '" wd "=RW:" rd "=RO' " ud "\n"
        "sudo systemd-nspawn -D " ud
          " /usr/bin/useradd -u $(id -u) -g $(id -g) $USER " "\n"
        "sudo systemd-nspawn -D " ud " --bind=" default-directory
          " -u $USER /usr/bin/bash -xe /tmp/nspawn" "\n" ) )
    (make-term-fancy bn td "bash" "-xe" sf)
    (list bn) ) )
#+END_SRC


* what's available for arch?

** orphaned [[https://aur.archlinux.org/packages/buildroot-toolchain/]]

has a config file in the source for just the (uClibc+binutils+gcc)
toolchain, makepkg calls buildroot using that config, then bundles the
result into a package that installs it to /opt/buildroot.

no dependencies listed (the installed toolchain is of course entirely
self-contained, and presumedly the make dependencies are in base-devel).

so it is kind of a dead end. the config file is really all you need.
if it had anything special it could be added to buildroot/configs/
but it doesn't. and who would want to install this toolchain? why?

** [[https://aur.archlinux.org/packages/crosstool-ng/]]

unlike the buildroot-toolchain, installs the right thing. but
unfortunately the dependencies are wrong. the author (in the package
comments) says you are expected to have base-devel to run makepkg,
not realizing that the resultant pkg can be installed to a machine
or chroot other than the one that ran makepkg.

*** [[https://aur.archlinux.org/packages/crosstool-ng-linaro]]

a clone that fetches from linaro.org (not crosstool-ng.org) mirror
also does package dependencies right (well, except makedepends are
redundant because of the base-devel convention).

*** [[https://aur.archlinux.org/packages/crosstool-ng-git]]

another clone that fetches from git://crosstool-ng.org/crosstool-ng


* what should be available?

a package that sets things up so you can run the makefiles, assuming
you know how to run it (i.e. you config, not the package).

- dependencies
- avoid installing configured scripts
  - because that discourages contributing fixes upstream
- helper scripts
  - easy 'git clone'
  - easy create out-of-src build directory (given a config?)

** hmm not much on portage either

[[http://packages.gentoo.org/package/sys-devel/ct-ng]]


* detecting dependencies

buildroot lists some
[[http://buildroot.org/downloads/manual/manual.html#requirement]]

** missing requirements lead to failed builds

can use chroot, or, better, systemd-nspawn to get upper bounds.

watch out for autoconf tricks (falling back to a backup dependency).

** static analysis of package binaries

*** namcap

has rules like...
- shebangdepends.py : scripts need their interpreter
- sodepends.py : ELFs need their dynamic links
- javafiles.py : JVM bytecode needs a JRE
- etc.

** dynamic analysis of runtime file accesses

*** inotifywatch

can catch more than namcap (e.g. reading of other pkg's data files).
but need multiple runs to cover all (even most) branches.

default limit 8k watches isn't big enough, up it via:
- /proc/sys/fs/inotify/max_user_watches

false positives from processes other than the build/run, but those
won't happen in a chroot.

*** fuse + { loggedfs or bigbrotherfs }

easier to set up than inotifywatch (no need to watch every file/dir).

but the loggedfs code is unmaintained, so is it trustworthy?
and bigbrotherfs isn't working (last edit jul 2014)

*** strace -e trace=file

output needs a lot of parsing (why duplicate work that is built into
inotifywatch and loggedfs?).

*** auditctl

really heavyweight, definitely not userspace, also needs parsing of
/var/log/audit, clunky and complicated.


* directory tree

#+BEGIN_EXAMPLE
.
âââ make.org
â
âââ buildroot
âââ crosstool
âââ downloads
â
âââ pacstrap
â   âââ justbase
â   âââ devbase
â   âââ brctng
â
âââ rootbrdc
â   âââ qemu_x86_defconfig
âââ rootctng
â   âââ qemu__i586-geode-linux-uclibc
âââ toolctng
    âââ i586-geode-linux-uclibc
#+END_EXAMPLE

#+BEGIN_SRC emacs-term
function pull { if [ -e $1 ];then (cd $1;git pull);else git clone $2 $1;fi }
pull buildroot git://git.buildroot.net/buildroot
pull crosstool https://github.com/crosstool-ng/crosstool-ng.git
mkdir -p downloads pacstrap rootbrdc rootctng toolctng
#+END_SRC


* setting up a pacstrap chroot

** pacstrap to populate base packages

#+NAME: pacstrap-setup
#+BEGIN_SRC emacs-term :var name="justbase" :var pkgs='("base")
mkdir pacstrap/$name
sudo pacstrap -d -c pacstrap/$name $pkgs
#+END_SRC

*** base plus base-devel

#+CALL: pacstrap-setup(name="devbase",pkgs='("base" "base-devel"))

*** plus requirements of buildroot and crosstool

#+NAME: brctng-deps
| basic filesystem      | base base-devel               |
| buildroot manual 2.1  | cpio python2 unzip rsync wget |
| running buildroot     | bc python                     |
| running crosstools-ng | gperf                         |

already in base:
| buildroot man | which sed bash gzip bzip2 perl tar |
| crosstools-ng | coreutils grep                     |

already in base-devel:
| buildroot man | make binutils gcc patch |
| crosstools-ng | automake bison flex     |

#+CALL: pacstrap-setup(name="brctng",pkgs=brctng-deps[,1])

** pacman -Ql tells us which files are installed

#+NAME: pacstrap-count
#+BEGIN_SRC emacs-term :var name="justbase"
cd pacstrap/$name
filter="s{^\\S+\\s$(pwd)/}[]; print if ! -l && -r && -f;"
echo                $(
  pacman -r . -Ql     |
  perl -lne "$filter" |
  sort -u             |
  wc -l              )
#+END_SRC
# the echo is cosmetic to add a line to the "set -x" log

#+CALL: pacstrap-count(name="devbase")
#+CALL: pacstrap-count(name="brctng")

| justbase | 26596 |
| devbase  | 29789 |
| brctng   | 39493 |

#+BEGIN_SRC emacs-term
sudo bash -c 'echo 40000 > /proc/sys/fs/inotify/max_user_watches'
#+END_SRC

** inotifywatch the files

#+NAME: pacstrap-watch
#+BEGIN_SRC emacs-term :var name="justbase" :session watch
cd pacstrap/$name
filter="s{^\\S+\\s$(pwd)/}[]; print if ! -l && -r && -f;"
ownedby='s{.* is owned by (\S+) .*}[$1];'
echo                                $(
  pacman -r . -Ql                     |
  perl -lne "$filter"                 |
  sort -u                             |
  inotifywatch -e access --fromfile - |
  tail -n +2                          |
  awk '{print $3}'                    |
  xargs pacman -r . -Qo               |
  perl -lpe "$ownedby"                |
  sort -u                            )
#+END_SRC

#+CALL: pacstrap-watch(name="devbase")
#+CALL: pacstrap-watch(name="brctng")

#+BEGIN_SRC emacs-lisp
(call-process-shell-command "pkill -INT --exact inotifywatch")
#+END_SRC

killall works with those same args too

** systemd-nspawn into chroot run interactive shell

#+BEGIN_SRC emacs-nspawn :pacstrap "brctng"
bash -i
#+END_SRC

** fakeroot seems like it should work, but fails

would be nicer to avoid sudo as much as possible, but pacman
doesn't like to make changes in userspace. this almost works:

#+BEGIN_EXAMPLE
mkdir rootdir
cp -R --parents /var/lib/pacman/sync rootdir
fakeroot -- pacman -r rootdir -S --noconfirm base base-devel
#+END_EXAMPLE

except pacman fails when it tries to chroot to run the install
scripts. conclusion: give up trying to fool pacman into running
non-elevated and use sudo pacstrap.


* build one of the buildroot defconfigs

#+NAME: rootbrdc-defconfig
| qemu_x86_defconfig |

#+BEGIN_SRC emacs-nspawn :pacstrap brctng :var defconfig=rootbrdc-defconfig
if [ -e rootbrdc/$defconfig ];then rm -r rootbrdc/$defconfig ;fi
mkdir rootbrdc/$defconfig
cd rootbrdc/$defconfig
make -C ../../buildroot O=../rootbrdc/$defconfig $defconfig
perl -i.bak -lpe '
  s{^BR2_DL_DIR="\K[^"]*(?="$)} [\${TOPDIR}/../downloads]x;
  ' .config
#+END_SRC

#+BEGIN_SRC emacs-nspawn :pacstrap brctng :var defconfig=rootbrdc-defconfig
cd rootbrdc/$defconfig
make nconfig
#+END_SRC

#+BEGIN_SRC emacs-nspawn :pacstrap brctng :var defconfig=rootbrdc-defconfig
cd rootbrdc/$defconfig
make
#+END_SRC

cd qx86/images
cp rootfs.ext2 rootcp.ext2
qemu-system-i386 -kernel bzImage -drive file=rootcp.ext2,if=ide -append root=/dev/sda


* avoiding toolchain rebuilds

buildroot can compile a toolchain from scratch within each root it
builds, but that's a big chunk of time, so it is suggested to
separately compile the toolchain with crosstool-ng.

** build ct-ng to run inside its git dir (the "hacker's way"):

#+BEGIN_SRC emacs-nspawn :pacstrap brctng
cd crosstool
./bootstrap
./configure --enable-local
make
#+END_SRC

*** cleanup

#+BEGIN_SRC emacs-term
cd crosstool
git clean -fdX
#+END_SRC

** build one of the ct-ng samples

#+NAME: toolctng-sample
| i686-nptl-linux-gnu |

#+BEGIN_SRC emacs-nspawn :pacstrap brctng :var sample=toolctng-sample
if [ -e toolctng/$sample ];then rm -r toolctng/$sample ;fi
mkdir -p toolctng/$sample/wrk
cd toolctng/$sample/wrk
../../../crosstool/ct-ng $sample
perl -i.bak -lpe '
  s{^CT_LOCAL_TARBALLS_DIR="\K[^"]*(?="$)} [\${CT_LIB_DIR}/../downloads]x;
  s{^CT_PREFIX_DIR=        "\K[^"]*(?="$)} [\${CT_TOP_DIR}/../out]x;
  ' .config
#+END_SRC

#+BEGIN_SRC emacs-nspawn :pacstrap brctng :var sample=toolctng-sample
cd toolctng/$sample/wrk
../../../crosstool/ct-ng build
#+END_SRC


* system requirements via pacman

this section is out of date. but this is what motivated all the above:
how to verify the dependencies for the PKGBUILD. once all the dust
settles this section can be updated with correct dependencies and to
use a term-mode buffer (instead of the original "compile" approach).

** the package spec

#+NAME: PKGBUILD
#+BEGIN_EXAMPLE
pkgname=buildroot-needs
pkgver=2014.11
pkgrel=1
arch=(any)
pkgdesc='This meta package depends on the packages required'
url=http://buildroot.org/
license=(GPL2)
depends=(which sed make binutils gcc bash patch gzip
         bzip2 perl tar cpio python2 unzip rsync wget
    gperf automake coreutils grep bison flex)
#+END_EXAMPLE

the minimum versions are all WAY old, so no point in specifying them.
what about the optional requirements?
g++ is part of gcc.

** grab a single-line parameter

not currently used, but keeping in case it is needed.

#+BEGIN_SRC emacs-lisp :var PKGBUILD=PKGBUILD :var name="____"
(flet ((match (r n s) (if (string-match r s) (match-string n s)))
       (param (x) (match (concat "^" x "=\\(.*\\)") 1 PKGBUILD)) )
  (param name) )
#+END_SRC

** build the package and install it

#+BEGIN_SRC emacs-lisp :var PKGBUILD=PKGBUILD
(let* ((tmp (make-temp-file "makepkg" t))
       (cmd (concat "( cd " tmp
                    " && makepkg --nodeps "
                    " && sudo pacman -U *.pkg.tar.xz"
                    " ) ; rm -r " tmp )) )
(with-temp-file (concat tmp "/PKGBUILD") (insert PKGBUILD))
(compile cmd t)
tmp )
#+END_SRC

** uninstalling

pacman -Rs buildroot-needs


* some helpful links

[[http://elinux.org/images/2/2a/Using-buildroot-real-project.pdf]]
slides from a talk "using buildroot for real projects" 2011
